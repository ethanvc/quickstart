// docker run --rm -it -v $(pwd):/workdir protoc_image --go_opt=paths=source_relative --go-grpc_opt=paths=source_relative --go_out=. --go-grpc_out=. coordinator_migration_svr.proto
// tips: use --go_out=paths=source_relative:. to generate file without directory structure.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: coordinator_migration_svr.proto

package coordinator_migration_svr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoordinatorMigrationSvr_GetUserDetail_FullMethodName = "/coordinator_migration_svr.CoordinatorMigrationSvr/GetUserDetail"
)

// CoordinatorMigrationSvrClient is the client API for CoordinatorMigrationSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatorMigrationSvrClient interface {
	GetUserDetail(ctx context.Context, in *GetUserDetailReq, opts ...grpc.CallOption) (*GetUserDetailResp, error)
}

type coordinatorMigrationSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorMigrationSvrClient(cc grpc.ClientConnInterface) CoordinatorMigrationSvrClient {
	return &coordinatorMigrationSvrClient{cc}
}

func (c *coordinatorMigrationSvrClient) GetUserDetail(ctx context.Context, in *GetUserDetailReq, opts ...grpc.CallOption) (*GetUserDetailResp, error) {
	out := new(GetUserDetailResp)
	err := c.cc.Invoke(ctx, CoordinatorMigrationSvr_GetUserDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorMigrationSvrServer is the server API for CoordinatorMigrationSvr service.
// All implementations must embed UnimplementedCoordinatorMigrationSvrServer
// for forward compatibility
type CoordinatorMigrationSvrServer interface {
	GetUserDetail(context.Context, *GetUserDetailReq) (*GetUserDetailResp, error)
	mustEmbedUnimplementedCoordinatorMigrationSvrServer()
}

// UnimplementedCoordinatorMigrationSvrServer must be embedded to have forward compatible implementations.
type UnimplementedCoordinatorMigrationSvrServer struct {
}

func (UnimplementedCoordinatorMigrationSvrServer) GetUserDetail(context.Context, *GetUserDetailReq) (*GetUserDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetail not implemented")
}
func (UnimplementedCoordinatorMigrationSvrServer) mustEmbedUnimplementedCoordinatorMigrationSvrServer() {
}

// UnsafeCoordinatorMigrationSvrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatorMigrationSvrServer will
// result in compilation errors.
type UnsafeCoordinatorMigrationSvrServer interface {
	mustEmbedUnimplementedCoordinatorMigrationSvrServer()
}

func RegisterCoordinatorMigrationSvrServer(s grpc.ServiceRegistrar, srv CoordinatorMigrationSvrServer) {
	s.RegisterService(&CoordinatorMigrationSvr_ServiceDesc, srv)
}

func _CoordinatorMigrationSvr_GetUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorMigrationSvrServer).GetUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoordinatorMigrationSvr_GetUserDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorMigrationSvrServer).GetUserDetail(ctx, req.(*GetUserDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CoordinatorMigrationSvr_ServiceDesc is the grpc.ServiceDesc for CoordinatorMigrationSvr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoordinatorMigrationSvr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coordinator_migration_svr.CoordinatorMigrationSvr",
	HandlerType: (*CoordinatorMigrationSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserDetail",
			Handler:    _CoordinatorMigrationSvr_GetUserDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordinator_migration_svr.proto",
}
